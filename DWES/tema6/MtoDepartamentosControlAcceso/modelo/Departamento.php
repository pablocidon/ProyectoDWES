<?phprequire_once "DepartamentoPDO.php";/** * File Departamento.php * @author Pablo Cidón. * * Fichero del modelo que crea los objetos de la clase departamento y usa sus métodos *//** * Class Departamento * @author Pablo Cidón. * * Fecha última revisión 16-04-2018 */class Departamento{    /**     * @var string $codDepartamento     Código del departamento.     */    private $codDepartamento;    /**     * @var string $descDepartamento    Descripción del departamento.     */    private $descDepartamento;    /**     * @var timestamp $fechaAltaDepartamento    Fecha de alta del departamento.     */    private $fechaAltaDepartamento;    /**     * @var float $volumenDeNegocio     Presupuesto con el que cuenta el departamento.     */    private $volumenDeNegocio;    /**     * @var timestamp   $fechaBajaDepartamento  Fecha para las bajas lógicas de los departamentos.     */    private $fechaBajaDepartamento;    /**     * Constructor de la clase Departamento.     *     * Función para construir el objeto de la clase departamento.     *     * @param string $codDepartamento Código del departamento.     * @param string $descDepartamento     * @param timestamp $fechaAltaDepartamento     * @param float $volumenDeNegocio     */    public function __construct($codDepartamento, $descDepartamento, $fechaAltaDepartamento, $volumenDeNegocio, $fechaBajaDepartamento){        $this->codDepartamento=$codDepartamento;        $this->descDepartamento=$descDepartamento;        $this->fechaAltaDepartamento=$fechaAltaDepartamento;        $this->volumenDeNegocio=$volumenDeNegocio;        $this->fechaBajaDepartamento=$fechaBajaDepartamento;    }    /**     * Función para obtener el código del departamento.     *     * @return string $codDepartamento Código del departamento.     */    public function getCodDepartamento(){        return $this->codDepartamento;    }    /**     * Función que devuelve la descripción del departamento.     *     * @return string $descDepartamento Descripción del departamento.     */    public function getDescDepartamento(){        return $this->descDepartamento;    }    /**     * Función para obtener la fecha de alta de un departamento     *     * @return timestamp $fechaAltaDepartamento Fecha en la que ha sido creado el departamento.     */    public function getFechaAltaDepartamento(){        return $this->fechaAltaDepartamento;    }    /**     * Función para obtener el volumen de negocio del departamento.     *     * @return float $volumenDeNegocio     */    public function getVolumenDeNegocio(){        return $this->volumenDeNegocio;    }    /**     * Función para obtener la fecha en la que un departamento ha sido dado de baja.     *     * @return timestamp $fechaBajaDepartamento Fecha de baja del departamento.     */    public function getFechaBajaDepartamento()    {        return $this->fechaBajaDepartamento;    }    /**     * Función para cambiar un código de departamenton.     *     * @param string $codDepartamento Código del departamento.     */    public function setCodDepartamento($codDepartamento){        $this->codDepartamento = $codDepartamento;    }    /**     * Función para cambiar la descripción de un departamento.     *     * @param string $descDepartamento Descripción del departamento.     */    public function setDescDepartamento($descDepartamento){        $this->descDepartamento = $descDepartamento;    }    /**     * Función para cambiar la fecha de alta de un departamento.     *     * @param timestamp $fechaAltaDepartamento Fecha de alta del departamento.     */    public function setFechaAltaDepartamento($fechaAltaDepartamento){        $this->fechaAltaDepartamento = $fechaAltaDepartamento;    }    /**     * Función para cambiar el volumen de negocio de un departamento.     *     * @param float $volumenDeNegocio Volumen de negocio del departamento.     */    public function setVolumenDeNegocio($volumenDeNegocio){        $this->volumenDeNegocio = $volumenDeNegocio;    }    /**     * Función para modificar la fecha en la que un departamento ha sido dado de baja.     *     * @param timestamp $fechaBajaDepartamento Fecha de baja del departamento.     */    public function setFechaBajaDepartamento($fechaBajaDepartamento){        $this->fechaBajaDepartamento = $fechaBajaDepartamento;    }    /**     * @function buscarDepartamentoPorCodigo($codDepartamento).     *     * Función para buscar un departamento por su código.     *     * @param string $codDepartamento Código del departamento a buscar.     *     * @return Departamento|null Dependiendo de si se ha encontrado ese registro en la base de datos.     */    public static function buscarDepartamentoPorCodigo($codDepartamento){        $departamento = null;        $arrayDepartamento = DepartamentoPDO::buscarDepartamentoPorCodigo($codDepartamento);        if(!empty($arrayDepartamento)){            $departamento = new Departamento($arrayDepartamento['Codigo'],$arrayDepartamento['Descripcion'],$arrayDepartamento['FechaAlta'],$arrayDepartamento['Volumen'],$arrayDepartamento['FechaBaja']);        }        return $departamento;    }    /**     * @function buscarDepartamentoPorDescripcion($descDepartamento).     *     * Función para buscar departamentos por un trozo de descripción.     *     * @param string $descDepartamento Descripción de departamento a buscar.     *     * @return Departamento|null Dependiendo de si se han obtenido resultados o no.     */    public static function buscarDepartamentoPorDescripcion($descDepartamento){        $departamentos = null;        $departamento = DepartamentoPDO::buscarDepartamentoPorDescripcion($descDepartamento);        if(!empty($departamento)){            for($i=0;$i<count($departamento);$i++){                $departamentos[$i] = new Departamento($departamento[$i]['Codigo'],$departamento[$i]['Descripcion'],$departamento[$i]['FechaAlta'],$departamento[$i]['Volumen'],$departamento[$i]['FechaBaja']);            }        }        return $departamentos;    }    /**     * @function altaDepartamento($codDepartamento,$descDepartamento,$fechaAlta,$volumen).     *     * Función para crear nuevos departamentos.     *     * @param string $codDepartamento Código del departamento.     * @param string $descDepartamento Descripción del departamento.     * @param timestamp $fechaAlta Fecha de creación del departamento.     * @param float $volumen Volumen de negocio que tiene el departamento.     * @return Departamento|null Dependiendo de si se ha creado o no el departamento.     */        public static function altaDepartamento($codDepartamento,$descDepartamento,$fechaAlta,$volumen){        $departamento = null;        if(DepartamentoPDO::altaDepartamento($codDepartamento,$descDepartamento,$fechaAlta,$volumen)){            $departamento = new Departamento($codDepartamento,$descDepartamento,$fechaAlta,$volumen,null);        }        return $departamento;    }    /**     * @function bajaFísicaDeDepartamento($codDepartamento).     *     * Función para eliminar un departamento de nuestra base de datos.     *     * @param string $codDepartamento Código del departamento a eliminar.     * @return bool Devuelve 0 si no se ha eliminado o 1 si se ha eliminado.     */    public function bajaFisicaDepartamento ($codDepartamento){        return DepartamentoPDO::bajaFisicaDepartamento($codDepartamento);    }    /**     * @param $fechaBaja     * @param $codDepartamento     */    public function bajaLogicaDepartamento ($fechaBaja, $codDepartamento){        return DepartamentoPDO::bajaLogicaDepartamento($fechaBaja,$codDepartamento);    }    /**     * @function rehabilitarDepartamento($codDepartamento)     *     * Función para rehabilitar los departamentos dados de baja.     *     * @param string $codDepartamento Código del departamento que se va a rehabilitar     * @return bool Devuelve 1 si se ha rehabilitado y sino, devuelve 0.     */    public function rehabilitarDepartamento ($codDepartamento){        return DepartamentoPDO::rehabilitarDepartamento($codDepartamento);    }    /**     * @function modificarDepartamento($descDepartamento,$volumen,$codUsuario).     *     * Función para modificar un departamento.     *     * @param string $descDepartamento Descripción del departamento.     * @param float $volumen Volumen de negocio del departamento.     * @param string $codDepartamento Código del departamento a modificar.     * @return bool Devulve 0 si no se ha modificado o 1 si se ha modificado.     */    public function modificarDepartamento ($descDepartamento,$volumen,$codDepartamento){        $editado = false;        if(DepartamentoPDO::modificarDepartamento($descDepartamento,$volumen,$codDepartamento)){            $editado=true;        }        return $editado;    }    /**     * @function validaCodNoExiste($codDepartamento).     *     * Función para comprobar que ya existe un departamento con ese código.     *     * @param string $codDepartamento Código del departamento que se va a buscar para su validación.     * @return array Devuelve un array en el caso de que se haya encontrado el registro     */    public static function validaCodNoExiste ($codDepartamento){        return DepartamentoPDO::buscarDepartamentoPorCodigo($codDepartamento);    }    /**     * @function listarDepartamentos().     *     * Función para realizar un listado de todos los departamentos que hay.     *     * @return Departamento     */    public static function listarDepartamentos(){        $departamentos = null;        $departamento = DepartamentoPDO::listarDepartamentos();        if(!empty($departamento)){            for($i=0;$i<count($departamento);$i++){                $departamentos[$i] = new Departamento($departamento[$i]['Codigo'],$departamento[$i]['Descripcion'],$departamento[$i]['FechaAlta'],$departamento[$i]['Volumen'],$departamento[$i]['FechaBaja']);            }        }        return $departamentos;    }    /**     * @function buscarDepartamentoPorDescripcionPaginado ($descDepartamento,$pagina,$registrosPagina)     *     * Función para buscar departamentos por descripción y con paginación     *     * @param string $descDepartamento     * @param integer $pagina     * @param integer $registrosPagina     * @return Departamento|null Dependiendo de si se han encontrado o no registros.     */    public static function buscarDepartamentoPorDescripcionPaginado ($descDepartamento,$pagina,$registrosPagina){        $arrayDepartamentos = null;        $departamento = DepartamentoPDO::buscarDepartamentoPorDescripcionPaginado($descDepartamento,$pagina,$registrosPagina);        if(!empty($departamento)){            for($i=0;$i<count($departamento);$i++){                $arrayDepartamentos[$i] = new Departamento($departamento[$i]['Codigo'],$departamento[$i]['Descripcion'],$departamento[$i]['FechaAlta'],$departamento[$i]['Volumen'],$departamento[$i]['FechaBaja']);            }        }        return $arrayDepartamentos;    }    public static function contarDepartamentosPorDescripcion ($descripcion){        return DepartamentoPDO::contarDepartamentosPorDescripcion ($descripcion);    }}?>