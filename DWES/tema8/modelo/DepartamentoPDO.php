<?php/*    * Autor: Pablo Cidón.    * Creado: 02-04-2018.    * Archivo: DepartamentoPDO.php    * Modificado: 10-04-2018.*/require_once "DBPDO.php";//Llamamos a la clase para la conexión a la base de datos/** * File DepartamentoPDO.php * @author Pablo Cidón. * * Fichero que contiene realiza las operaciones en la base de datos del objeto Departamento. *//** * Class DepartamentoPDO * @author Pablo Cidón. * * Fecha última revisión 16-04-2018 */class DepartamentoPDO{    /**     * @function buscarDepartamentoPorCodigo($codDepartamento).     *     * Función para buscar un departamento en la base de datos según su código.     *     * @param string $codDepartamento Código del departamento a buscar.     *     * @return array|null En el caso de que se encuentre devolverá un array, sino devolverá null.     */    public static function buscarDepartamentoPorCodigo($codDepartamento){        $consulta = "SELECT * FROM Departamento WHERE CodDepartamento = ?";        $arrayDepartamento = [];        $resultado = DBPDO::ejecutaConsulta($consulta,[$codDepartamento]);        if($resultado->rowCount()==1){            $resultadoFetch = $resultado->fetchObject();            $arrayDepartamento['Codigo'] = $resultadoFetch->CodDepartamento;            $arrayDepartamento['Descripcion'] = $resultadoFetch->DescDepartamento;            $arrayDepartamento['FechaAlta'] = $resultadoFetch->FechaCreacionDepartamento;            $arrayDepartamento['Volumen'] = $resultadoFetch->VolumenDeNegocio;            $arrayDepartamento['FechaBaja'] = $resultadoFetch->FechaBajaDepartamento;        }        return $arrayDepartamento;    }    /**     * @function buscarDepartamentoPorDescripcion($descDepartamento).     *     * Función para buscar un departamento por código.     *     * @param string $descDepartamento Descripción de departamento a buscar     * @return array|null Si hay registros, devolverá un array con los mismos, de lo contrario, devolverá null.     */    public static function buscarDepartamentoPorDescripcion($descDepartamento){        $consulta = "SELECT * FROM Departamento WHERE DescDepartamento LIKE concat('%',?,'%') ORDER BY CodDepartamento";        $departamento = [];        $arrayDepartamento = [];        $contador = 0;        $resultado = DBPDO::ejecutaConsulta($consulta,[$descDepartamento]);        if($resultado->rowCount()>0){            while ($resultadoFetch = $resultado -> fetchObject()){                $arrayDepartamento['Codigo'] = $resultadoFetch->CodDepartamento;                $arrayDepartamento['Descripcion'] = $resultadoFetch->DescDepartamento;                $arrayDepartamento['FechaAlta'] = $resultadoFetch->FechaAltaDepartamento;                $arrayDepartamento['Volumen'] = $resultadoFetch->VolumenDeNegocio;                $arrayDepartamento['FechaBaja'] = $resultadoFetch->FechaBajaDepartamento;                $departamento[$contador]=$arrayDepartamento;                $contador++;            }        }        return $departamento;    }    /**     * @function altaDepartamento($codDepartamento,$descDepartamento,$fechaAlta,$volumen).     *     * Función para crear un registro de departamento en la base de datos.     *     * @param string $codDepartamento Código del departamento.     * @param string $descDepartamento Descripción del departamento a buscar.     * @param timestamp $fechaAlta Fecha en la que se va a crear el registro.     * @param float $volumen Volumen de negocio que va a tener el departamento.     * @return bool Devuelve 1 si el registro se ha creado, y si no devolverá 0.     */    public static function altaDepartamento($codDepartamento,$descDepartamento,$fechaAlta,$volumen){        $registrado=false;        $consulta="INSERT INTO Departamento (CodDepartamento,DescDepartamento,FechaCreacionDepartamento,VolumenDeNegocio) VALUES (?,?,?,?)";        $resConsulta= DBPDO::ejecutaConsulta($consulta,[$codDepartamento,$descDepartamento,$fechaAlta,$volumen]);        if ($resConsulta->rowCount()==1){            $registrado=true;        }        return $registrado;    }    /**     * @function bajaFisicaDepartamento($codDepartamento).     *     * Función para eliminar un departamento de nuestra base de datos.     *     * @param string $codDepartamento Código del departamento que va a ser eliminado.     *     * @return bool Devuelve 1 si el registro se ha eliminado, sino devolverá 0.     */    public static function bajaFisicaDepartamento ($codDepartamento){        $eliminado = false;        $consulta = "DELETE FROM Departamento WHERE CodDepartamento=?";        $resultado = DBPDO::ejecutaConsulta($consulta,[$codDepartamento]);        if($resultado->rowCount()==1){            $eliminado = true;        }        return $eliminado;    }    /**     * @function bajaLogicaDepartamento($fechaBaja, $codDepartamento).     *     * Función para realizar las bajas lógicas de los departamentos.     *     * @param timestamp $fechaBaja Fecha en la que el departamento será dado de baja.     * @param string $codDepartamento Código del departamento que vamos a dar de baja.     * @return bool Devuelve 1 si el departamento ha sido dado de baja sino, devolverá 1.     */    public static function bajaLogicaDepartamento ($fechaBaja, $codDepartamento){        $dadoBaja = false;        $consulta = "UPDATE Departamento SET FechaBajaDepartamento = ? WHERE CodDepartamento = ?";        $resconsulta = DBPDO::ejecutaConsulta($consulta,[$fechaBaja,$codDepartamento]);        if($resconsulta->rowCount()==1){            $dadoBaja = true;        }        return $dadoBaja;    }    /**     * @function rehabilitarDepartamento($codDepartamento).     *     * Función para rehabilitar los departamentos que están dados de baja.     *     * @param string $codDepartamento Código del departamento que va a ser rehabilitado.     * @return bool Devuelve 1 si el departamento ha sido rehabilitado, sino, devolverá 0.     */    public static function rehabilitarDepartamento ($codDepartamento){        $rehabilitado = false;        $consulta = "UPDATE Departamento SET FechaBajaDepartamento = NULL WHERE CodDepartamento = ?";        $resconsulta = DBPDO::ejecutaConsulta($consulta,[$codDepartamento]);        if($resconsulta->rowCount()==1){            $rehabilitado = true;        }        return $rehabilitado;    }    /**     * @function modificarDepartamento($codDepartamento).     *     * Función para modificar los departamentos.     *     * @param string $descDepartamento Nueva descripción que va a tener nuestro departamento.     * @param float $volumen Nuevo volumen de negocio que va a tener nuestro departamento.     * @param string $codDepartamento Código del departamento que va a ser modificado.     * @return bool Devuelve 1 si se ha modificado y si no, devulve 0.     */    public static function modificarDepartamento ($descDepartamento,$volumen,$codDepartamento){        $modificado = false;        $consulta = "UPDATE Departamento SET DescDepartamento = ?, VolumenDeNegocio = ? WHERE CodDepartamento = ?";        $resconsulta = DBPDO::ejecutaConsulta($consulta,[$descDepartamento,$volumen,$codDepartamento]);        if($resconsulta->rowCount()==1){            $modificado = true;        }        return $modificado;    }    /**     * @function listarDepartamentos().     *     * Función para realizar un listado de los departamentos que hay en nuestra base de datos.     *     * @return array Devuelve un array con todos los departamentos que tengamos.     */    public static function listarDepartamentos(){        $consulta = "SELECT * FROM Departamento";        $departamento = [];        $arrayDepartamento = [];        $contador = 0;        $resultado = DBPDO::ejecutaConsulta($consulta,[]);        if($resultado->rowCount()>0){            while ($resultadoFetch = $resultado -> fetchObject()){                $arrayDepartamento['Codigo'] = $resultadoFetch->CodDepartamento;                $arrayDepartamento['Descripcion'] = $resultadoFetch->DescDepartamento;                $arrayDepartamento['FechaAlta'] = $resultadoFetch->FechaAltaDepartamento;                $arrayDepartamento['Volumen'] = $resultadoFetch->VolumenDeNegocio;                $arrayDepartamento['FechaBaja'] = $resultadoFetch->FechaBajaDepartamento;                $departamento[$contador]=$arrayDepartamento;                $contador++;            }        }        return $departamento;    }    /**     * @function buscarDepartamentoPorDescripcionPaginado($descDepartamento,$pagina,$registrosPagina).     *     * Función para buscar departamentos y que devuelva los registros con paginación.     *     * @param string $descDepartamento Descripción del departamento a buscar.     * @param integer $pagina Página en la que nos encontramos     * @param integer $registrosPagina Cantidad de registros que se van a mostrar en la página     * @return array Con todos los departamentos que han sido encontrados.     */    public static function buscarDepartamentoPorDescripcionPaginado ($descDepartamento,$pagina,$registrosPagina){        $arrayDepartamento = [];        $departamento = [];        if(is_null($pagina)){            $pagina = 1;        }        $primerRegistro = ($pagina-1)*($registrosPagina);        $consulta = "SELECT * FROM Departamento WHERE DescDepartamento LIKE concat('%',?,'%') LIMIT $primerRegistro, $registrosPagina";        $resultado = DBPDO::ejecutaConsulta($consulta,[$descDepartamento]);        $contador = 0;        if($resultado->rowCount()>0){            while ($resultadoFetch = $resultado -> fetchObject()){                $arrayDepartamento['Codigo'] = $resultadoFetch->CodDepartamento;                $arrayDepartamento['Descripcion'] = $resultadoFetch->DescDepartamento;                $arrayDepartamento['FechaAlta'] = $resultadoFetch->FechaCreacionDepartamento;                $arrayDepartamento['Volumen'] = $resultadoFetch->VolumenDeNegocio;                $arrayDepartamento['FechaBaja'] = $resultadoFetch->FechaBajaDepartamento;                $departamento[$contador]=$arrayDepartamento;                $contador++;            }        }        return $departamento;    }    /**     * @param $descripcion     * @return mixed     */    public static function contarDepartamentosPorDescripcion($descripcion){        $consultaCuentaDepartamentos = "SELECT count(*) FROM Departamento WHERE DescDepartamento LIKE concat('%',?,'%')";        $resultSet = DBPDO::ejecutaConsulta($consultaCuentaDepartamentos, [$descripcion]);        if ($resultSet->rowCount()) {            $totalDepartamentos = $resultSet->fetchColumn(0);        }        return $totalDepartamentos;    }}?>